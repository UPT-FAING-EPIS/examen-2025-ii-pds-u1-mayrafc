# Primero, prueba este workflow simplificado para verificar que funciona
name: Test Infrastructure Diagram

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/**'  # Agregamos esto para que se ejecute al cambiar el workflow
  workflow_dispatch:  # Permite ejecutar manualmente
  pull_request:       # Agregamos esto temporalmente para que aparezca en Actions
    branches: [ main ]

jobs:
  test-workflow:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Asegura que obtenga todo el historial
     
    - name: Debug Info
      run: |
        echo "Branch: ${{ github.ref_name }}"
        echo "Event: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Working directory: $(pwd)"
        ls -la
        echo "Terraform directory exists: $(test -d terraform && echo 'yes' || echo 'no')"
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
     
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install diagrams
     
    - name: Generate Infrastructure Diagram
      run: |
        cat > generate_diagram.py << 'EOF'
        from diagrams import Diagram, Cluster, Edge
        from diagrams.onprem.client import Users
        from diagrams.onprem.database import PostgreSQL
        from diagrams.onprem.inmemory import Redis
        from diagrams.programming.framework import React
        from diagrams.programming.language import Csharp
        from diagrams.saas.cdn import Cloudflare
        from diagrams.generic.network import Router
        
        print("Starting diagram generation...")
        
        with Diagram("Online Exam Platform Infrastructure", show=False, direction="TB"):
            users = Users("Students/Teachers")
            
            with Cluster("GitHub Pages"):
                frontend = React("React Frontend")
            
            with Cluster("Railway Platform"):
                with Cluster("Backend Services"):
                    api = Csharp(".NET API")
                
                with Cluster("Data Layer"):
                    db = PostgreSQL("PostgreSQL")
                    cache = Redis("Redis Cache")
            
            cdn = Cloudflare("CDN")
            lb = Router("Load Balancer")
            
            users >> cdn >> frontend
            frontend >> Edge(label="API Calls") >> lb >> api
            api >> Edge(label="Read/Write") >> db
            api >> Edge(label="Cache") >> cache
            
        print("Diagram generated successfully!")
        EOF
        
        python generate_diagram.py
        
        # Verificar que el archivo se generó
        if [ -f "online_exam_platform_infrastructure.png" ]; then
          echo "✅ Diagram file generated successfully"
          ls -la online_exam_platform_infrastructure.png
        else
          echo "❌ Diagram file was not generated"
          ls -la
          exit 1
        fi
     
    - name: Upload diagram artifact
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-diagram-${{ github.run_number }}
        path: online_exam_platform_infrastructure.png
        retention-days: 30
        if-no-files-found: error
     
    - name: Setup docs directory and commit
      run: |
        echo "Setting up git configuration..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "Creating docs directory..."
        mkdir -p docs/
        
        echo "Copying diagram..."
        cp online_exam_platform_infrastructure.png docs/
        
        echo "Current git status:"
        git status
        
        echo "Adding files to git..."
        git add docs/online_exam_platform_infrastructure.png
        
        echo "Checking for changes..."
        if ! git diff --staged --quiet; then
          echo "Changes detected, committing..."
          git commit -m "Update infrastructure diagram [skip ci] - Run #${{ github.run_number }}"
          echo "Pushing changes..."
          git push
          echo "✅ Changes committed and pushed successfully"
        else
          echo "ℹ️ No changes to commit"
        fi